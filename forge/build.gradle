plugins {
	id "com.github.johnrengelman.shadow" version "7.0.0"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

def ENV = System.getenv()

architectury {
	platformSetupLoomIde()
	forge()
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common
	dev
}

artifacts {
	dev(jar)
}

loom {
	forge {
		mixinConfigs = ["kubejs.mixins.json", "kubejs-common.mixins.json"]
	}
}

repositories {
	maven {
		name "ModMaven (JEI)"
		url "https://modmaven.dev/"
		content {
			includeGroup "mezz.jei"
			includeGroup "net.darkhax.bookshelf"
			includeGroup "net.darkhax.gamestages"
		}
	}
}

dependencies {
	forge("net.minecraftforge:forge:${rootProject.architectury.minecraft}-${rootProject.forge_version}")

	modApi("dev.architectury:architectury-forge:${rootProject.architectury_version}")

	modApi("dev.latvian.mods:rhino-forge:${rootProject.rhino_version}") { transitive false }

	modCompileOnly("mezz.jei:jei-1.17.1:${rootProject.forge_jei_version}")
	modRuntimeOnly("mezz.jei:jei-1.17.1:${rootProject.forge_jei_version}")
	modCompileOnly("net.darkhax.bookshelf:Bookshelf-1.16.5:${rootProject.forge_bookshelf_version}")
	modCompileOnly("net.darkhax.gamestages:GameStages-1.16.5:${rootProject.forge_gamestages_version}")

	common(project(path: ":common", configuration: "dev")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
		expand "version": project.version
	}
}

shadowJar {
	exclude "fabric.mod.json"

	configurations = [project.configurations.shadowCommon]
	classifier "dev-shadow"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveBaseName.set "${rootProject.mod_name}-${project.name}"
	archiveClassifier.set null
}

jar {
	manifest {
		attributes([
				"Specification-Title"     : project.mod_id,
				"Specification-Vendor"    : project.mod_author,
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : version,
				"Implementation-Vendor"   : project.mod_author,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}

	classifier "dev"
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

if (ENV.CURSEFORGE_KEY) {
	curseforge {
		apiKey = ENV.CURSEFORGE_KEY
		project {
			id = project.curseforge_id_forge
			releaseType = project.curseforge_type
			addGameVersion "Forge"
			addGameVersion "1.17.1"
			mainArtifact(remapJar.archivePath)
			relations {
				requiredDependency 'rhino'
				requiredDependency 'architectury-forge'
				optionalDependency 'jei'
				optionalDependency 'game-stages'
			}
			changelog = getGitChangelog
			changelogType = 'markdown'
		}
	}
}

publishing {
	publications {
		mavenForge(MavenPublication) {
			artifactId = "${rootProject.mod_name}-${project.name}"
			from components.java
		}
	}

	repositories {
		if (ENV.FTB_MAVEN_TOKEN) {
			maven {
				url "https://maven.ftb.dev/release"
				credentials {
					username = "latvian"
					password = "${ENV.FTB_MAVEN_TOKEN}"
				}
			}
		}

		if (ENV.SAPS_TOKEN) {
			maven {
				url "https://maven.saps.dev/minecraft"
				credentials {
					username = "latvian"
					password = "${ENV.SAPS_TOKEN}"
				}
			}
		}
	}
}

rootProject.tasks.getByName("curseforgePublish").dependsOn tasks.getByName("curseforge")
